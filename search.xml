<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>桌宠对话API使用文档</title>
      <link href="/article/40287.html"/>
      <url>/article/40287.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>智能语音交互服务，完整流程：</p><ol><li><strong>接收用户语音输入</strong>：MP3格式音频（16kHz&#x2F;单声道）</li><li><strong>语音识别转文本（ASR）</strong>：通过ASR服务将音频转为文本</li><li><strong>结合RAG增强生成回复</strong>：使用检索增强生成（Retrieval-Augmented Generation）技术，基于本地知识库生成响应</li><li><strong>文本转语音（TTS）</strong>：将生成的文本转为语音，支持自定义音色（通过<code>reference_id</code>指定）</li><li><strong>返回语音文件路径</strong>：用户可通过返回的URL直接访问生成的语音文件</li></ol><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例请求（需替换API密钥和文件路径）</span></span><br><span class="line">curl -X POST <span class="string">&quot;http://localhost:8000/dialogue_tts/&quot;</span> \</span><br><span class="line">     -H <span class="string">&quot;X-API-Key: your_api_key&quot;</span> \</span><br><span class="line">     -F <span class="string">&quot;mp3_file=@user_audio.mp3&quot;</span></span><br></pre></td></tr></table></figure><h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><h2 id="1-语音对话处理"><a href="#1-语音对话处理" class="headerlink" title="1. 语音对话处理"></a>1. 语音对话处理</h2><ul><li><strong>URL</strong>: <code>/dialogue_tts/</code></li><li><strong>方法</strong>: POST</li><li><strong>认证</strong>: <code>X-API-Key</code> 请求头</li><li><strong>参数</strong>:<ul><li><code>mp3_file</code> (File): 用户上传的MP3文件，要求 <strong>16kHz采样率、单声道</strong>，文件大小不超过10MB</li><li><code>reference_id</code> (可选): TTS音色参考ID，默认为<code>config.yml</code>中配置的默认音色</li></ul></li><li><strong>响应示例</strong>:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;file_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/static/output_1a2b3c4d.mp3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-文件清理"><a href="#2-文件清理" class="headerlink" title="2. 文件清理"></a>2. 文件清理</h2><ul><li><strong>URL</strong>: <code>/clean_file/&#123;filename&#125;</code></li><li><strong>方法</strong>: DELETE</li><li><strong>参数</strong>: <ul><li><code>filename</code> (路径参数): 需清理的文件名（如<code>output_1a2b3c4d.mp3</code>）</li></ul></li><li><strong>限制</strong>: 仅允许清理<code>static/</code>和<code>RAG/documents/</code>目录下的文件</li></ul><h2 id="3-上传知识文档"><a href="#3-上传知识文档" class="headerlink" title="3. 上传知识文档"></a>3. 上传知识文档</h2><ul><li><strong>URL</strong>: <code>/upload_RAG/</code></li><li><strong>方法</strong>: POST</li><li><strong>限制</strong>: <ul><li>仅支持<code>.txt</code>文件，UTF-8编码</li><li>单个文件大小不超过5MB</li></ul></li><li><strong>功能</strong>: 上传文档至<code>RAG/documents/</code>目录，实时更新知识库</li></ul><h2 id="4-列出RAG文档"><a href="#4-列出RAG文档" class="headerlink" title="4. 列出RAG文档"></a>4. 列出RAG文档</h2><ul><li><strong>URL</strong>: <code>/list_RAG</code></li><li><strong>方法</strong>: GET</li><li><strong>响应示例</strong>:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;doc1.txt&quot;</span><span class="punctuation">,</span> <span class="string">&quot;doc2.txt&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h1><p>所有接口需在请求头中添加 <code>X-API-Key</code>，密钥配置于 <code>config.yml</code> 的 <code>app.call_parameters.api_key</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">&quot;X-API-Key&quot;</span>: <span class="string">&quot;your_api_key&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h1><table><thead><tr><th>状态码</th><th>说明</th><th>可能原因</th></tr></thead><tbody><tr><td>401</td><td>无效API密钥</td><td>请求头未携带或密钥错误</td></tr><tr><td>400</td><td>无效请求&#x2F;文件类型错误</td><td>上传非MP3文件或空文件</td></tr><tr><td>403</td><td>非法文件路径</td><td>尝试清理非授权目录下的文件</td></tr><tr><td>404</td><td>文件不存在</td><td>清理或访问的文件不存在</td></tr><tr><td>500</td><td>内部错误</td><td>ASR&#x2F;TTS服务异常或LLM响应失败</td></tr><tr><td>503</td><td>服务不可用</td><td>依赖服务不可用</td></tr></tbody></table><h1 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h1><h2 id="RAG配置"><a href="#RAG配置" class="headerlink" title="RAG配置"></a>RAG配置</h2><ul><li><strong>向量数据库</strong>: Qdrant（本地持久化存储，路径为<code>RAG/qdrant/</code>）</li><li><strong>检索策略</strong>: 相似度Top 5，基于文本嵌入模型<code>text-embedding-v1</code></li><li><strong>知识库管理</strong>: 文档需上传至<code>RAG/documents/</code>，仅支持<code>.txt</code>格式</li></ul><h2 id="语音参数"><a href="#语音参数" class="headerlink" title="语音参数"></a>语音参数</h2><table><thead><tr><th>服务</th><th>采样率</th><th>声道</th><th>其他要求</th></tr></thead><tbody><tr><td>ASR</td><td>16kHz</td><td>单声道</td><td>比特率≥128kbps</td></tr><tr><td>TTS</td><td>24kHz</td><td>单声道</td><td>输出格式为MP3，带ID3标签</td></tr></tbody></table><h1 id="部署指南"><a href="#部署指南" class="headerlink" title="部署指南"></a>部署指南</h1><ol><li><p><strong>目录结构</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── config.yml            # 配置文件</span><br><span class="line">├── static/               # 临时文件存储（自动清理）</span><br><span class="line">├── RAG/</span><br><span class="line">│   ├── documents/        # RAG知识库文档</span><br><span class="line">│   └── qdrant/           # Qdrant向量数据库数据</span><br><span class="line">├── logs/                 # 日志文件（按日滚动）</span><br></pre></td></tr></table></figure></li><li><p><strong>配置文件示例（config.yml）</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">call_parameters:</span></span><br><span class="line">    <span class="attr">api_key:</span> <span class="string">&quot;your_call_key&quot;</span>  <span class="comment"># 通过环境变量 APP_CALL_PARAMETERS_API_KEY 可覆盖</span></span><br><span class="line">  <span class="attr">aliyun:</span></span><br><span class="line">    <span class="attr">api_key:</span> <span class="string">&quot;aliyun_key&quot;</span>     <span class="comment"># 通过环境变量 APP_ALIYUN_API_KEY 可覆盖</span></span><br><span class="line">    <span class="attr">base_url:</span> <span class="string">&quot;https://dashscope.aliyuncs.com/api/v1&quot;</span></span><br><span class="line">    <span class="attr">chat_model:</span> <span class="string">&quot;qwen-max&quot;</span>    <span class="comment"># 对话模型</span></span><br><span class="line">    <span class="attr">emb_model:</span> <span class="string">&quot;text-embedding-v1&quot;</span>  <span class="comment"># 嵌入模型</span></span><br><span class="line">  <span class="attr">fish_audio:</span></span><br><span class="line">    <span class="attr">api_key:</span> <span class="string">&quot;fish_key&quot;</span>       <span class="comment"># 通过环境变量 APP_FISH_AUDIO_API_KEY 可覆盖</span></span><br><span class="line">    <span class="attr">default_reference_id:</span> <span class="string">&quot;default_voice&quot;</span>  <span class="comment"># 默认音色ID</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启动命令</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务（支持环境变量覆盖配置）</span></span><br><span class="line">python index.py</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="依赖列表（requirements-txt）"><a href="#依赖列表（requirements-txt）" class="headerlink" title="依赖列表（requirements.txt）"></a>依赖列表（requirements.txt）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fastapi&gt;=0.68.0</span><br><span class="line">uvicorn&gt;=0.15.0</span><br><span class="line">openai&gt;=1.0.0</span><br><span class="line">llama-index-core&gt;=0.10.0</span><br><span class="line">llama-index-llms-openai&gt;=0.1.0</span><br><span class="line">llama-index-embeddings-openai&gt;=0.1.0</span><br><span class="line">llama-index-vector-stores-qdrant&gt;=0.1.0</span><br><span class="line">qdrant-client&gt;=1.6.0</span><br><span class="line">pygame&gt;=2.0.1</span><br><span class="line">aiofiles&gt;=0.7.0</span><br><span class="line">python-multipart&gt;=0.0.5</span><br><span class="line">pyyaml&gt;=6.0</span><br><span class="line">chardet&gt;=4.0.0</span><br><span class="line">fish-audio-sdk&gt;=0.1.0</span><br></pre></td></tr></table></figure><h3 id="主要变更说明"><a href="#主要变更说明" class="headerlink" title="主要变更说明"></a>主要变更说明</h3><ol><li><strong>接口标准化</strong>：明确文件大小限制（ASR文件≤10MB，RAG文档≤5MB）</li><li><strong>环境变量支持</strong>：在配置示例中补充环境变量覆盖说明</li><li><strong>错误处理增强</strong>：为每个错误码添加典型场景描述</li><li><strong>技术细节完善</strong>：补充音频比特率要求、Qdrant存储路径等关键参数</li><li><strong>格式统一</strong>：所有JSON响应示例格式化，代码块标注语言类型</li></ol>]]></content>
      
      
      <categories>
          
          <category> 桌宠 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu美化教程</title>
      <link href="/article/76c74091.html"/>
      <url>/article/76c74091.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介及预览"><a href="#简介及预览" class="headerlink" title="简介及预览"></a>简介及预览</h1><p>这篇教程是接之前安装教程的，至于时间问题，比较忙(懒癌犯了不想写)<br>效果如下图<br><img src="https://s2.loli.net/2023/01/21/jcTws7feDJ5yv9O.png" alt="预览1"><br><img src="https://s2.loli.net/2023/01/21/FuXvR8OWV5tzkpm.png" alt="预览2"><br><img src="https://s2.loli.net/2023/01/21/8nJoXzuewqSHi15.png" alt="预览3"></p><h1 id="grub美化"><a href="#grub美化" class="headerlink" title="grub美化"></a>grub美化</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>前往<a href="https://www.gnome-look.org/browse/cat/109/order/latest">gnome-look</a>下载自己喜欢的grub主题  </p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><h3 id="主题目录中存在install-sh文件"><a href="#主题目录中存在install-sh文件" class="headerlink" title="主题目录中存在install.sh文件"></a>主题目录中存在install.sh文件</h3><p>cd到主题所在目录<br>给与install.sh运行权限并运行install.sh  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x install.sh</span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure><h3 id="主题中没有install-sh文件"><a href="#主题中没有install-sh文件" class="headerlink" title="主题中没有install.sh文件"></a>主题中没有install.sh文件</h3><p>在grub安装路径下新建主题themes文件夹存放主题  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /usr/share/grub/themes/</span><br></pre></td></tr></table></figure><p>将grub复制到grub主题文件夹  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /home/用户/Downloads/主题文件夹名 /usr/share/grub/themes/主题名 -rf </span><br></pre></td></tr></table></figure><p>修改主题文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure><p>找到#GRUB_THEME&#x3D;将其修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_THEME=<span class="string">&quot;/usr/share/grub/themes/主题文件夹名/theme.txt&quot;</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="登录界面美化"><a href="#登录界面美化" class="headerlink" title="登录界面美化"></a>登录界面美化</h1><p>需要使用第三方脚本，在终端中执行以下命令安装前提条件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libglib2.0-dev-bin -y</span><br></pre></td></tr></table></figure><p>下载GitHub用户PRATAP PANABAKA的脚本，并移动系统PATH  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://github.com/PRATAP-KUMAR/ubuntu-gdm-set-background/archive/main.tar.gz | tar zx --strip-components=1 ubuntu-gdm-set-background-main/ubuntu-gdm-set-background</span><br><span class="line">sudo <span class="built_in">mv</span> ubuntu-gdm-set-background /usr/local/bin</span><br></pre></td></tr></table></figure><p>使用如下命令指定一张图片作为登录背景  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ubuntu-gdm-set-background --image 图片路径（例：/home/用户名/example.jpg）</span><br></pre></td></tr></table></figure><h1 id="Ubuntu主题美化"><a href="#Ubuntu主题美化" class="headerlink" title="Ubuntu主题美化"></a>Ubuntu主题美化</h1><p>先安装gnome tweaks工具和扩展工具  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-tweaks -y &amp;&amp; sudo apt install gnome-shell-extensions -y</span><br></pre></td></tr></table></figure><p>然后注销账户再次登录（不注销看不到user themes选项），打开扩展工具开启user themes<br><a href="https://pan.baidu.com/s/1liqICq1p7JZkNILaOkkl2A?pwd=y1ym">下载</a>主题文件<br>在WitheSur-gtk-theme打开终端<br>给install.sh文件运行权限并运行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x install.sh</span><br><span class="line">sudo ./install.sh -t all  -N glassy -s 220</span><br></pre></td></tr></table></figure><p>如果出现选择界面选择glassy<br>给tweaks.sh文件运行权限并运行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x tweaks.sh</span><br><span class="line">sudo ./tweaks.sh -g -f monterey</span><br></pre></td></tr></table></figure><p>将图标主题复制到icons文件夹  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> -r Mkos-Big-Sur /usr/share/icons</span><br></pre></td></tr></table></figure><p>打开gnome tweaks工具（在应用程序内工具里，叫优化），将配置改为下图<br><img src="https://s2.loli.net/2023/01/22/VzORIlPhWcvwrmf.png" alt="配置"><br>在系统设置–&gt;外观中关闭<strong>Dock面板模式</strong>，设置Dock行为关闭<strong>显示卷(v)和设备(D)</strong><br>至此教程结束  </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装教程</title>
      <link href="/article/51f91042.html"/>
      <url>/article/51f91042.html</url>
      
        <content type="html"><![CDATA[<h1 id="制作启动U盘"><a href="#制作启动U盘" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h1><h2 id="下载Ubuntu"><a href="#下载Ubuntu" class="headerlink" title="下载Ubuntu"></a>下载Ubuntu</h2><p><a href="https://www.ubuntu.com/download">官网下载</a><br><a href="https://cn.ubuntu.com/download">中国官网下载</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases">清华大学镜像站下载</a></p><h2 id="制作启动U盘-1"><a href="#制作启动U盘-1" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>下载<a href="https://rufus.ie/">rufuns</a><br>运行rufus，插入U盘，选择镜像后会自动完成配置<br><img src="https://s2.loli.net/2023/01/19/zKCuDwmhQ4ayXTg.png" alt="rufus"><br>点击制作，完成后U盘制作完成  </p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>下载<a href="https://www.ventoy.net/cn/download.html">ventoy</a><br><img src="https://s2.loli.net/2023/01/19/un3xZqWDL9XJSsz.png" alt="ventoy"><br>点击安装，等待完成即可，详细到<a href="https://www.ventoy.net/cn/doc_start.html">官方文档</a>查看</p><h1 id="更改启动项"><a href="#更改启动项" class="headerlink" title="更改启动项"></a>更改启动项</h1><p>关闭Windows快速启动<br>关闭方法：控制面板—&gt;硬件和声音—&gt;电源选项—&gt;选择电源按钮的功能—&gt;更改当前不可用设置—&gt;关闭快速启动<br>关闭安全启动（Secure Boot）<br>完成后选择U盘启动<br>进入安装界面选择Try or Install Ubuntu<br><img src="https://s2.loli.net/2023/01/19/HRqdulrK1gD8IhN.png" alt="Ubuntu选择界面">  </p><h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1><p>首先进行一些基础设置<br> 1.设置语言（简体中文在倒数第三个）<br> 2.键盘布局（汉语）<br> 3.无线网络（推荐选择没有网络）<br> 4.安装类型（其他选项，手动进行分区）<br> 5.分区方案（下表为Linux所以发行版中挂载点作用）  </p><table><thead><tr><th align="left">目录</th><th align="left">建议大小</th><th align="left">格式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x2F;</td><td align="left">10G左右</td><td align="left">ext4</td><td align="left">根目录</td></tr><tr><td align="left">&#x2F;boot</td><td align="left">512M-1G</td><td align="left">ext4</td><td align="left">启动分区，即使主要的根分区出现了问题，计算机依然能够启动</td></tr><tr><td align="left">&#x2F;home</td><td align="left">尽量大点</td><td align="left">ext4</td><td align="left">用户工作目录；个人配置文件，如个人环境变量等；所有账号分配一个工作目录</td></tr><tr><td align="left">&#x2F;tmp</td><td align="left">5G左右</td><td align="left">ext4</td><td align="left">系统的临时文件，这对于多用户系统或者网络服务器来说是有必要的</td></tr><tr><td align="left">&#x2F;usr</td><td align="left">尽量大点</td><td align="left">ext4</td><td align="left">应用程序目录，大部分的软件都安装在这里</td></tr><tr><td align="left">&#x2F;var</td><td align="left">5G左右</td><td align="left">ext4</td><td align="left">日志文件，经常会变动，硬盘读写率高的文件放在此中</td></tr><tr><td align="left">&#x2F;srv</td><td align="left">5G左右</td><td align="left">ReiserFS或Ext3</td><td align="left">一些服务启动之后，这些服务所需要取用的资料目录</td></tr><tr><td align="left">&#x2F;opt</td><td align="left">随便</td><td align="left">ext4</td><td align="left">存放可选的安装文件，个人一般把自己下载的软件存在里面</td></tr><tr><td align="left">swap</td><td align="left">运行内存2倍左右</td><td align="left">swap</td><td align="left">内存不够用时防止内存溢出</td></tr><tr><td align="left">&#x2F;var&#x2F;log</td><td align="left">随便</td><td align="left">ext4</td><td align="left">系统日志记录分区</td></tr><tr><td align="left">&#x2F;bin</td><td align="left">随便</td><td align="left">ext4</td><td align="left">存放程序，里面的程序可以直接通过命令调用</td></tr><tr><td align="left">&#x2F;dev</td><td align="left">随便</td><td align="left">ext4</td><td align="left">存放所有设备文件</td></tr><tr><td align="left">&#x2F;etc</td><td align="left">随便</td><td align="left">ext4</td><td align="left">是Linux下的配置文件的老家，很多管理和使用的修改都在这里</td></tr><tr><td align="left">&#x2F;sbin</td><td align="left">随便</td><td align="left">ext4</td><td align="left">和bin目录相似</td></tr></tbody></table><p> 6.选择时区（点击时区位置就可以）<br> 7.创建用户名<br>安装成功后会弹出对话框<br><img src="https://s2.loli.net/2023/01/19/bXFCmJejaQdIlS6.jpg" alt="对话框"><br>点击重启<br><img src="https://s2.loli.net/2023/01/19/aThInOzH2xQ1to6.jpg" alt="拔出U盘"><br>拔出U盘回车重启<br>至此Ubuntu系统已经成功安装完成  </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/article/f3fb008f.html"/>
      <url>/article/f3fb008f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Gitee上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/">Hexo</a>官网进行详细查看，因为<a href="https://hexo.io/">Hexo</a>的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>Windows：去<a href="https://git-scm.com/">git</a>官网下载<a href="https://git-scm.com/">git</a>然后安装<br>Linux：执行下方命令就可以了  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>Android：先下载<a href="https://termux.dev/en/">Termux</a>，然后在软件内执行下方命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install git</span><br></pre></td></tr></table></figure><h1 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装<a href="https://nodejs.org/">node.js</a></h1><p>Windows：在node.js官网选择LTS版本下载安装即可<br>Linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>Android：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nodejs</span><br></pre></td></tr></table></figure><p>安装完成后使用  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>查看是否安装成功  </p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>Windows打开git bash输入  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>Linux或macOS<br>在命令行中输入  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>Android  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>使用hexo -v查看是否成功<br>然后创建一个文件夹<br>进入文件夹初始化一下hexo  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>完成后文件夹中有<br>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>_config.yml: 博客的配置文件  </p><h1 id="在GitHub或Gitee创建个人仓库"><a href="#在GitHub或Gitee创建个人仓库" class="headerlink" title="在GitHub或Gitee创建个人仓库"></a>在<a href="https://github.com/">GitHub</a>或<a href="https://gitee.com/">Gitee</a>创建个人仓库</h1><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>首先注册一个账户<br>注册完登录后，在GitHub中看到一个New repository(新建仓库)<br>创建一个和你名字一样的仓库(你GitHub.github.io)<br>点击create repository  </p><h2 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h2><p>首先注册一个账户<br>注册完登录后，在Gitee中看到一个加号，然后新建仓库<br>推荐创建一个和你名字一样的仓库<br>点击创建仓库  </p><h1 id="生成SSH添加到GitHub或Gitee"><a href="#生成SSH添加到GitHub或Gitee" class="headerlink" title="生成SSH添加到GitHub或Gitee"></a>生成SSH添加到GitHub或Gitee</h1><p>回到git bash中  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你GitHub(Gitee)的名字&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;注册GitHub(Gitee)用的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>可以用以下两条，检查一下你有没有输对  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后用  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>查看你的SSH公钥复制  </p><h2 id="GitHub-1"><a href="#GitHub-1" class="headerlink" title="GitHub"></a>GitHub</h2><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去  </p><h2 id="Gitee-1"><a href="#Gitee-1" class="headerlink" title="Gitee"></a>Gitee</h2><p>点击头像-设置-SSH公钥<br>把你的id_rsa.pub里面的信息复制进去<br>在gitbash中，查看是否成功  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h1 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h1><p>打开_config.yml翻到最后  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">上传地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>注意:冒号后边有空格<br>然后执行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>hexo cl清除了你之前生成的东西，也可以不加<br>hexo g 生成静态文章<br>hexo d 部署文章<br>hexo n 文章名称，创建新文章  </p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
